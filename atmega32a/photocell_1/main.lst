   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/peter/projects/avr/atmega32a/photocell_1/",100,0,2,.Ltext0
   8               		.stabs	"main.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=r(0,2);0;127;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  28               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  30               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  31               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  32               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  33               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  34               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  35               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  36               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  37               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  42               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  47               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  48               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  51               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  52               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
  58               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  59               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  60               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  61               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  62               		.stabs	"/usr/lib/gcc/avr/4.8.1/include/stdint.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  64               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  65               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  66               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  67               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  68               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  69               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  70               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  71               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  72               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  73               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  74               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  75               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  76               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  77               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  78               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  79               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  80               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  81               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  82               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  83               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  84               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  85               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  86               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  87               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  88               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  89               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  90               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  91               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  92               		.stabn	162,0,0,0
  93               		.stabn	162,0,0,0
  94               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  95               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  96               		.stabn	162,0,0,0
  97               		.stabn	162,0,0,0
  98               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
  99               		.stabs	"__fuse_t:t(6,1)=(6,2)=s2low:(0,11),0,8;high:(0,11),8,8;;",128,0,252,0
 100               		.stabn	162,0,0,0
 101               		.stabn	162,0,0,0
 102               		.stabs	"adc_init:F(0,47)",36,0,45,adc_init
 103               	.global	adc_init
 104               		.type	adc_init, @function
 105               	adc_init:
 106               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  * @file    main.c
   3:main.c        ****  * @brief   Photocell 1. Read the light sensor signal through ADC,
   4:main.c        ****  *          flash LEDs accordingly to digitized analog input signal.
   5:main.c        ****  * @details Compile with 'make flash', i.e. JTAG enabled.
   6:main.c        ****  *          One needs to calibrate accordingly to sensor's spectral response.
   7:main.c        ****  *          This is wriiten for SEN 09088 mini photocell (GL5528):
   8:main.c        ****  *          - light resistance at 10Lux(at 25*C): 8-20 KOhm
   9:main.c        ****  *          - dark resistance at 0 Lux: 1.0 MOhm (min)
  10:main.c        ****  *          - gamma value at 100-10 Lux: 0.7
  11:main.c        ****  *          - power dissipation (at 25*C): 100 mW
  12:main.c        ****  *          - max voltage (at 25*C): 150 V
  13:main.c        ****  *          - spectral response peak (at 25*C): 540 nm
  14:main.c        ****  *          - ambient temperature range: -30 ~ +70 *C 
  15:main.c        ****  * @date    27 Aug 2016 05:50 PM
  16:main.c        ****  */
  17:main.c        **** 
  18:main.c        **** 
  19:main.c        **** #define __DELAY_BACKWARD_COMPATIBLE__
  20:main.c        **** 
  21:main.c        **** #ifndef F_CPU
  22:main.c        **** #define F_CPU 1000000UL    /* 1 MHz clock speed */
  23:main.c        **** #endif
  24:main.c        **** 
  25:main.c        **** #include <avr/io.h>
  26:main.c        **** #include <util/delay.h>
  27:main.c        **** 
  28:main.c        **** /* Voltage divider:
  29:main.c        ****  *
  30:main.c        ****  ********************************
  31:main.c        ****  * Vin --
  32:main.c        ****  *     R1 (6.67 kOhm used)
  33:main.c        ****  *     -----Vout (to ADC port 0)
  34:main.c        ****  *     R2 (photocell)
  35:main.c        ****  *     gnd
  36:main.c        ****  *******************************
  37:main.c        ****  *
  38:main.c        ****  * Vout = Vin * R2 / (R1 + R2)
  39:main.c        ****  */
  40:main.c        **** 
  41:main.c        **** 
  42:main.c        **** uint8_t V_REF = 5;  /* 5V reference */
  43:main.c        **** 
  44:main.c        **** /* @brief   Initialize ADC */
  45:main.c        **** void adc_init(void) {
 107               		.stabn	68,0,45,.LM0-.LFBB1
 108               	.LM0:
 109               	.LFBB1:
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  46:main.c        ****     ADMUX = 1 << REFS0; /* set up voltage reference to AVCC */
 114               		.stabn	68,0,46,.LM1-.LFBB1
 115               	.LM1:
 116 0000 80E4      		ldi r24,lo8(64)
 117 0002 87B9      		out 0x7,r24
  47:main.c        ****     ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* set prescaler mode to 128 (min resolu
 118               		.stabn	68,0,47,.LM2-.LFBB1
 119               	.LM2:
 120 0004 87E0      		ldi r24,lo8(7)
 121 0006 86B9      		out 0x6,r24
  48:main.c        ****     ADCSRA |= (1 << ADEN); /* enable ADC */
 122               		.stabn	68,0,48,.LM3-.LFBB1
 123               	.LM3:
 124 0008 379A      		sbi 0x6,7
 125 000a 0895      		ret
 126               		.size	adc_init, .-adc_init
 127               	.Lscope1:
 128               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 129               		.stabd	78,0,0
 130               		.stabs	"adc_read:F(5,4)",36,0,52,adc_read
 131               		.stabs	"channel:P(5,2)",64,0,52,24
 132               	.global	adc_read
 133               		.type	adc_read, @function
 134               	adc_read:
 135               		.stabd	46,0,0
  49:main.c        **** }
  50:main.c        **** 
  51:main.c        **** /* @brief   Return ADC sample. */
  52:main.c        **** uint16_t adc_read(uint8_t channel) {
 136               		.stabn	68,0,52,.LM4-.LFBB2
 137               	.LM4:
 138               	.LFBB2:
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
  53:main.c        ****     channel &= 0x07;    /* assert channel is between 0-7 inclusive */
  54:main.c        ****     ADMUX = (ADMUX & 0xF8) | channel;   /* set multiplexer, clear bottom 3 bits before ORing */
 143               		.stabn	68,0,54,.LM5-.LFBB2
 144               	.LM5:
 145 000c 97B1      		in r25,0x7
  53:main.c        ****     channel &= 0x07;    /* assert channel is between 0-7 inclusive */
 146               		.stabn	68,0,53,.LM6-.LFBB2
 147               	.LM6:
 148 000e 8770      		andi r24,lo8(7)
 149               		.stabn	68,0,54,.LM7-.LFBB2
 150               	.LM7:
 151 0010 987F      		andi r25,lo8(-8)
 152 0012 892B      		or r24,r25
 153 0014 87B9      		out 0x7,r24
  55:main.c        ****     ADCSRA |= (1 << ADSC);  /* start single conversion */
 154               		.stabn	68,0,55,.LM8-.LFBB2
 155               	.LM8:
 156 0016 369A      		sbi 0x6,6
 157               	.L4:
  56:main.c        ****     while (!(ADCSRA & (1 << ADIF)));    /* allow conversion to complete */
 158               		.stabn	68,0,56,.LM9-.LFBB2
 159               	.LM9:
 160 0018 349B      		sbis 0x6,4
 161 001a 00C0      		rjmp .L4
  57:main.c        ****     return (ADC);
 162               		.stabn	68,0,57,.LM10-.LFBB2
 163               	.LM10:
 164 001c 84B1      		in r24,0x4
 165 001e 95B1      		in r25,0x4+1
  58:main.c        **** }
 166               		.stabn	68,0,58,.LM11-.LFBB2
 167               	.LM11:
 168 0020 0895      		ret
 169               		.size	adc_read, .-adc_read
 170               	.Lscope2:
 171               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 172               		.stabd	78,0,0
 173               		.stabs	"ports_init:F(0,47)",36,0,61,ports_init
 174               	.global	ports_init
 175               		.type	ports_init, @function
 176               	ports_init:
 177               		.stabd	46,0,0
  59:main.c        **** 
  60:main.c        **** /* @brief   Initialize port pins to be output direction. */
  61:main.c        **** void ports_init(void) {
 178               		.stabn	68,0,61,.LM12-.LFBB3
 179               	.LM12:
 180               	.LFBB3:
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 0 */
 184               	.L__stack_usage = 0
  62:main.c        ****     DDRC = 0xFF;    /* set all PORTC to OUTPUT */
 185               		.stabn	68,0,62,.LM13-.LFBB3
 186               	.LM13:
 187 0022 8FEF      		ldi r24,lo8(-1)
 188 0024 84BB      		out 0x14,r24
  63:main.c        ****     PORTC = 0x00;   /* set LOW all output port pins */
 189               		.stabn	68,0,63,.LM14-.LFBB3
 190               	.LM14:
 191 0026 15BA      		out 0x15,__zero_reg__
 192 0028 0895      		ret
 193               		.size	ports_init, .-ports_init
 194               	.Lscope3:
 195               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 196               		.stabd	78,0,0
 197               		.stabs	"adc_from_v:F(5,4)",36,0,68,adc_from_v
 198               	.global	adc_from_v
 199               		.type	adc_from_v, @function
 200               	adc_from_v:
 201               		.stabd	46,0,0
  64:main.c        **** }
  65:main.c        **** 
  66:main.c        **** /* @brief   ADC reading from voltage.
  67:main.c        ****  * @details Voltage in mV for proper arithmetic without truncation. */
  68:main.c        **** uint16_t adc_from_v(uint16_t v) {
 202               		.stabn	68,0,68,.LM15-.LFBB4
 203               	.LM15:
 204               	.LFBB4:
 205               	/* prologue: function */
 206               	/* frame size = 0 */
 207               	/* stack size = 0 */
 208               	.L__stack_usage = 0
  69:main.c        ****     uint32_t tmp = v << 10;  /* V * 1024 */
 209               		.stabn	68,0,69,.LM16-.LFBB4
 210               	.LM16:
 211 002a 60E0      		ldi r22,0
 212 002c 70E0      		ldi r23,0
 213 002e 782F      		mov r23,r24
 214 0030 770F      		lsl r23
 215 0032 770F      		lsl r23
 216 0034 80E0      		ldi r24,0
 217 0036 90E0      		ldi r25,0
  70:main.c        ****     return ((tmp / (V_REF * 1000)) & 0xFFFF);
 218               		.stabn	68,0,70,.LM17-.LFBB4
 219               	.LM17:
 220 0038 E091 0000 		lds r30,V_REF
 221 003c 48EE      		ldi r20,lo8(-24)
 222 003e 53E0      		ldi r21,lo8(3)
 223 0040 E49F      		mul r30,r20
 224 0042 9001      		movw r18,r0
 225 0044 E59F      		mul r30,r21
 226 0046 300D      		add r19,r0
 227 0048 1124      		clr __zero_reg__
 228 004a 4427      		clr r20
 229 004c 37FD      		sbrc r19,7
 230 004e 4095      		com r20
 231 0050 542F      		mov r21,r20
 232 0052 0E94 0000 		call __udivmodsi4
  71:main.c        **** }
 233               		.stabn	68,0,71,.LM18-.LFBB4
 234               	.LM18:
 235 0056 C901      		movw r24,r18
 236 0058 0895      		ret
 237               		.size	adc_from_v, .-adc_from_v
 238               	.Lscope4:
 239               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 240               		.stabd	78,0,0
 241               		.stabs	"v_from_adc:F(5,4)",36,0,75,v_from_adc
 242               		.stabs	"adc:P(5,4)",64,0,75,24
 243               	.global	v_from_adc
 244               		.type	v_from_adc, @function
 245               	v_from_adc:
 246               		.stabd	46,0,0
  72:main.c        **** 
  73:main.c        **** /* @brief   Voltage reading from ADC sample.
  74:main.c        ****  * @details Result in mV. */
  75:main.c        **** uint16_t v_from_adc(uint16_t adc) {
 247               		.stabn	68,0,75,.LM19-.LFBB5
 248               	.LM19:
 249               	.LFBB5:
 250               	/* prologue: function */
 251               	/* frame size = 0 */
 252               	/* stack size = 0 */
 253               	.L__stack_usage = 0
  76:main.c        ****     uint32_t tmp = adc * V_REF *1000;
 254               		.stabn	68,0,76,.LM20-.LFBB5
 255               	.LM20:
 256 005a 6091 0000 		lds r22,V_REF
 257 005e 48EE      		ldi r20,lo8(-24)
 258 0060 53E0      		ldi r21,lo8(3)
 259 0062 649F      		mul r22,r20
 260 0064 9001      		movw r18,r0
 261 0066 659F      		mul r22,r21
 262 0068 300D      		add r19,r0
 263 006a 1124      		clr __zero_reg__
 264 006c AC01      		movw r20,r24
 265 006e 249F      		mul r18,r20
 266 0070 C001      		movw r24,r0
 267 0072 259F      		mul r18,r21
 268 0074 900D      		add r25,r0
 269 0076 349F      		mul r19,r20
 270 0078 900D      		add r25,r0
 271 007a 1124      		clr r1
 272 007c A0E0      		ldi r26,0
 273 007e B0E0      		ldi r27,0
  77:main.c        ****     return ((tmp >> 10) & 0xFFFF);
 274               		.stabn	68,0,77,.LM21-.LFBB5
 275               	.LM21:
 276 0080 2AE0      		ldi r18,10
 277               		1:
 278 0082 B695      		lsr r27
 279 0084 A795      		ror r26
 280 0086 9795      		ror r25
 281 0088 8795      		ror r24
 282 008a 2A95      		dec r18
 283 008c 01F4      		brne 1b
  78:main.c        **** }
 284               		.stabn	68,0,78,.LM22-.LFBB5
 285               	.LM22:
 286 008e 0895      		ret
 287               		.size	v_from_adc, .-v_from_adc
 288               	.Lscope5:
 289               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 290               		.stabd	78,0,0
 291               		.section	.text.startup,"ax",@progbits
 292               		.stabs	"main:F(0,1)",36,0,82,main
 293               	.global	main
 294               		.type	main, @function
 295               	main:
 296               		.stabd	46,0,0
  79:main.c        **** 
  80:main.c        **** 
  81:main.c        **** int
  82:main.c        **** main(void) {
 297               		.stabn	68,0,82,.LM23-.LFBB6
 298               	.LM23:
 299               	.LFBB6:
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 0 */
 303               	.L__stack_usage = 0
  83:main.c        ****     uint16_t adc_sample;
  84:main.c        **** 
  85:main.c        ****     ports_init();
 304               		.stabn	68,0,85,.LM24-.LFBB6
 305               	.LM24:
 306 0000 0E94 0000 		call ports_init
  86:main.c        ****     adc_init();
 307               		.stabn	68,0,86,.LM25-.LFBB6
 308               	.LM25:
 309 0004 0E94 0000 		call adc_init
  87:main.c        **** 
  88:main.c        ****     while(1) {
  89:main.c        ****         adc_sample = adc_read(0);
  90:main.c        ****         if (adc_sample > 900) {
  91:main.c        ****             PORTC = 0b11111111;         /* set all HIGH */
  92:main.c        ****         } else if (adc_sample > 900) {
  93:main.c        ****             PORTC = 0b01111111;
  94:main.c        ****         } else if (adc_sample > 840) {
  95:main.c        ****             PORTC = 0b00111111;
  96:main.c        ****         } else if (adc_sample > 780) {
  97:main.c        ****             PORTC = 0b00011111;
  98:main.c        ****         } else if (adc_sample > 740) {
  99:main.c        ****             PORTC = 0b00001111;
 100:main.c        ****         } else if (adc_sample > 680) {
 101:main.c        ****             PORTC = 0b00000111;
 102:main.c        ****         } else if (adc_sample > 620) {
 103:main.c        ****             PORTC = 0b00000011;
 104:main.c        ****         } else if (adc_sample > 560) {
 105:main.c        ****             PORTC = 0b00000001;
 310               		.stabn	68,0,105,.LM26-.LFBB6
 311               	.LM26:
 312 0008 C1E0      		ldi r28,lo8(1)
 103:main.c        ****         } else if (adc_sample > 560) {
 313               		.stabn	68,0,103,.LM27-.LFBB6
 314               	.LM27:
 315 000a D3E0      		ldi r29,lo8(3)
 101:main.c        ****         } else if (adc_sample > 620) {
 316               		.stabn	68,0,101,.LM28-.LFBB6
 317               	.LM28:
 318 000c 17E0      		ldi r17,lo8(7)
  99:main.c        ****         } else if (adc_sample > 680) {
 319               		.stabn	68,0,99,.LM29-.LFBB6
 320               	.LM29:
 321 000e 0FE0      		ldi r16,lo8(15)
  97:main.c        ****         } else if (adc_sample > 740) {
 322               		.stabn	68,0,97,.LM30-.LFBB6
 323               	.LM30:
 324 0010 3FE1      		ldi r19,lo8(31)
 325 0012 F32E      		mov r15,r19
  95:main.c        ****         } else if (adc_sample > 780) {
 326               		.stabn	68,0,95,.LM31-.LFBB6
 327               	.LM31:
 328 0014 4FE3      		ldi r20,lo8(63)
 329 0016 E42E      		mov r14,r20
  91:main.c        ****         } else if (adc_sample > 900) {
 330               		.stabn	68,0,91,.LM32-.LFBB6
 331               	.LM32:
 332 0018 DD24      		clr r13
 333 001a DA94      		dec r13
 334               	.L10:
  89:main.c        ****         if (adc_sample > 900) {
 335               		.stabn	68,0,89,.LM33-.LFBB6
 336               	.LM33:
 337 001c 80E0      		ldi r24,0
 338 001e 0E94 0000 		call adc_read
  90:main.c        ****             PORTC = 0b11111111;         /* set all HIGH */
 339               		.stabn	68,0,90,.LM34-.LFBB6
 340               	.LM34:
 341 0022 8538      		cpi r24,-123
 342 0024 23E0      		ldi r18,3
 343 0026 9207      		cpc r25,r18
 344 0028 00F0      		brlo .L11
  91:main.c        ****         } else if (adc_sample > 900) {
 345               		.stabn	68,0,91,.LM35-.LFBB6
 346               	.LM35:
 347 002a D5BA      		out 0x15,r13
 348 002c 00C0      		rjmp .L10
 349               	.L11:
  94:main.c        ****             PORTC = 0b00111111;
 350               		.stabn	68,0,94,.LM36-.LFBB6
 351               	.LM36:
 352 002e 8934      		cpi r24,73
 353 0030 23E0      		ldi r18,3
 354 0032 9207      		cpc r25,r18
 355 0034 00F0      		brlo .L13
  95:main.c        ****         } else if (adc_sample > 780) {
 356               		.stabn	68,0,95,.LM37-.LFBB6
 357               	.LM37:
 358 0036 E5BA      		out 0x15,r14
 359 0038 00C0      		rjmp .L10
 360               	.L13:
  96:main.c        ****             PORTC = 0b00011111;
 361               		.stabn	68,0,96,.LM38-.LFBB6
 362               	.LM38:
 363 003a 8D30      		cpi r24,13
 364 003c 23E0      		ldi r18,3
 365 003e 9207      		cpc r25,r18
 366 0040 00F0      		brlo .L14
  97:main.c        ****         } else if (adc_sample > 740) {
 367               		.stabn	68,0,97,.LM39-.LFBB6
 368               	.LM39:
 369 0042 F5BA      		out 0x15,r15
 370 0044 00C0      		rjmp .L10
 371               	.L14:
  98:main.c        ****             PORTC = 0b00001111;
 372               		.stabn	68,0,98,.LM40-.LFBB6
 373               	.LM40:
 374 0046 853E      		cpi r24,-27
 375 0048 22E0      		ldi r18,2
 376 004a 9207      		cpc r25,r18
 377 004c 00F0      		brlo .L15
  99:main.c        ****         } else if (adc_sample > 680) {
 378               		.stabn	68,0,99,.LM41-.LFBB6
 379               	.LM41:
 380 004e 05BB      		out 0x15,r16
 381 0050 00C0      		rjmp .L10
 382               	.L15:
 100:main.c        ****             PORTC = 0b00000111;
 383               		.stabn	68,0,100,.LM42-.LFBB6
 384               	.LM42:
 385 0052 893A      		cpi r24,-87
 386 0054 22E0      		ldi r18,2
 387 0056 9207      		cpc r25,r18
 388 0058 00F0      		brlo .L16
 101:main.c        ****         } else if (adc_sample > 620) {
 389               		.stabn	68,0,101,.LM43-.LFBB6
 390               	.LM43:
 391 005a 15BB      		out 0x15,r17
 392 005c 00C0      		rjmp .L10
 393               	.L16:
 102:main.c        ****             PORTC = 0b00000011;
 394               		.stabn	68,0,102,.LM44-.LFBB6
 395               	.LM44:
 396 005e 8D36      		cpi r24,109
 397 0060 22E0      		ldi r18,2
 398 0062 9207      		cpc r25,r18
 399 0064 00F0      		brlo .L17
 103:main.c        ****         } else if (adc_sample > 560) {
 400               		.stabn	68,0,103,.LM45-.LFBB6
 401               	.LM45:
 402 0066 D5BB      		out 0x15,r29
 403 0068 00C0      		rjmp .L10
 404               	.L17:
 104:main.c        ****             PORTC = 0b00000001;
 405               		.stabn	68,0,104,.LM46-.LFBB6
 406               	.LM46:
 407 006a 8133      		cpi r24,49
 408 006c 9240      		sbci r25,2
 409 006e 00F0      		brlo .L18
 410               		.stabn	68,0,105,.LM47-.LFBB6
 411               	.LM47:
 412 0070 C5BB      		out 0x15,r28
 413 0072 00C0      		rjmp .L10
 414               	.L18:
 106:main.c        ****         } else {
 107:main.c        ****             PORTC = 0x00;               /* set all LOW */
 415               		.stabn	68,0,107,.LM48-.LFBB6
 416               	.LM48:
 417 0074 15BA      		out 0x15,__zero_reg__
 418 0076 00C0      		rjmp .L10
 419               		.size	main, .-main
 420               		.stabs	"adc_sample:r(5,4)",64,0,83,24
 421               		.stabn	192,0,0,.LFBB6-.LFBB6
 422               		.stabn	224,0,0,.Lscope6-.LFBB6
 423               	.Lscope6:
 424               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 425               		.stabd	78,0,0
 426               	.global	V_REF
 427               		.data
 428               		.type	V_REF, @object
 429               		.size	V_REF, 1
 430               	V_REF:
 431 0000 05        		.byte	5
 432               		.stabs	"V_REF:G(5,2)",32,0,42,0
 433               		.text
 434               		.stabs	"",100,0,0,.Letext0
 435               	.Letext0:
 436               		.ident	"GCC: (GNU) 4.8.1"
 437               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccv8ZZY9.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccv8ZZY9.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccv8ZZY9.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccv8ZZY9.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccv8ZZY9.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccv8ZZY9.s:105    .text:0000000000000000 adc_init
     /tmp/ccv8ZZY9.s:134    .text:000000000000000c adc_read
     /tmp/ccv8ZZY9.s:176    .text:0000000000000022 ports_init
     /tmp/ccv8ZZY9.s:200    .text:000000000000002a adc_from_v
     /tmp/ccv8ZZY9.s:430    .data:0000000000000000 V_REF
     /tmp/ccv8ZZY9.s:245    .text:000000000000005a v_from_adc
     /tmp/ccv8ZZY9.s:295    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__udivmodsi4
__do_copy_data
